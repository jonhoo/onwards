name: terraform

on:
  push:
    branches:
      - main
    ## RECOMMENDED: Specify to only run this workflow file when terraform configuration has changed.
    # NOTE: not setting this since we want the client/server artifacts to be
    # re-deployed when re-built.
    # paths:
    #   - <<INPUT REQUIRED>> ## Example: 'terraform/**.tf'

## RECOMMENDED: Limit apply runs job / workflow to a single concurrency group at a time.
## link: https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency: production

env:
  NODE_VERSION: 18

jobs:
  apply:
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: cargo install cargo-lambda
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-lambda@1

      - name: Install zig for cargo-lambda
        run: sudo snap install zig --classic --beta

      - name: cargo lambda build
        run: cargo lambda build --release --arm64

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_APPLY_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up QEMU for arm64 build
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Publish docker image to Amazon ECR
        uses: docker/build-push-action@v6
        with:
          context: . # so we also get what cargo lambda build built
          platforms: linux/arm64
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/onwards:${{ github.sha }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Apply
        working-directory: ./infra
        run: |
          terraform init
          terraform apply \
            -auto-approve \
            -var 'domain=${{ vars.DOMAIN }}' \
            -var 'aws_region=${{ vars.AWS_REGION }}' \
            -var "github_repo=$GITHUB_REPOSITORY" \
            -var "lambda_image_tag=${{ github.sha }}"
